// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Subscription {
  id String @db.Uuid @id @default(uuid())
  name String @db.VarChar(50)
  desc String? @db.Text
  max_employee Int? @db.Integer
  price_per_employee Int @db.Integer
  type SubscriptionType
  day_length Int @db.Integer

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false) 

  Companies Company[]
  History Transaction[]

  @@map("Subscription") 
}

enum SubscriptionType {
  TRIAL
  PAID
}

model Company {
  id String @db.Uuid @id @default(uuid())
  name String @db.VarChar(100)
  address String? @db.VarChar(100)
  loc_lat Float? @db.DoublePrecision
  loc_long Float? @db.DoublePrecision
  
  subscription_id String @db.Uuid
  Subscription Subscription @relation(fields: [subscription_id],references: [id])

  max_employee Int @db.Integer
  subs_date_start DateTime @db.Timestamptz()
  subs_date_end DateTime @db.Timestamptz()

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false) 

  employees Employee[]
  lettertypes LetterType[]
  letters Letter[]
  attendancetypes AttendanceType[]
  attendances Attendance[]
  absences AbsenceLeave[]
  transactions Transaction[]


  @@map("Company")
}

model Employee {
  id String @db.Uuid @id @default(uuid())

  company_id String @db.Uuid()
  Company Company @relation(fields: [company_id],references: [id])

  workscheme WorkSchemeType?

  first_name String @db.VarChar(100)
  last_name String @db.VarChar(100)

  gender String? @db.Char(1)

  address String? @db.Text

  email String @db.VarChar(100)

  password String 

  phone String? @db.VarChar(100)

  is_admin Boolean @db.Boolean @default(false)

  attendance_id String? @db.Uuid
  attendance AttendanceType? @relation(fields: [attendance_id],references: [id])


  birth_date DateTime? @db.Date

  birth_place String? @db.VarChar(50)

  nik String? @db.VarChar(16) @unique

  position String? @db.VarChar(50)

  branch String? @db.VarChar(50)

  contract ContractType?

  last_education EducationType?

  pict_dir String?

  account_bank BankCode?
  account_number String? @db.VarChar()
  account_name String? @db.VarChar()

  //Oauth
  google_id String? @db.VarChar(100) @unique
  access_token String? @db.Text @unique
  refresh_token String? @db.Text @unique

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)

  letters Letter[]
  attendances Attendance[]
  absences AbsenceLeave[]
  passwordResets PasswordReset[]

  @@map("Employee")
}

enum BankCode {
  BRI       // 002
  Mandiri   // 008
  BNI       // 009
  Danamon   // 011
  Permata   // 013
  BCA       // 014
  Maybank   // 016
  Panin     // 019
  Bukopin   // 020
  CIMB      // 022
  UOB       // 023
  OCBC      // 028
  BJB       // 110
  Muamalat  // 147
  BTN       // 200
  BTPN      // 213
  Mega      // 426
  SyariahMandiri // 451
  Commonwealth   // 950
}

enum ContractType{
  PERMANENT
  CONTRACT
  INTERN
}

enum WorkSchemeType{
  WFA
  WFO
  HYBRID
}

enum EducationType{
  HIGH_SCHOOL //SMA/K
  //D1 ??
  //D2 ??
  //D3 ??
  BACHELOR //S1/D4
  MASTER // S2
  DOCTOR // S3
}

model LetterType{
  id String @db.Uuid @id @default(uuid())

  name String @db.VarChar(50)

  content String? @db.Text

  company_id String @db.Uuid
  company Company @relation(fields: [company_id],references: [id])

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt

  letters Letter[]

  @@map("LetterType")
}

model Letter {
  id String @db.Uuid @id @default(uuid())

  company_id String @db.Uuid
  company Company @relation(fields: [company_id],references: [id])

  employee_id String @db.Uuid
  employee Employee @relation(fields: [employee_id], references: [id])

  lettertype_id String @db.Uuid 
  lettertype LetterType @relation(fields: [lettertype_id], references: [id])

  name String @db.VarChar(50)

  desc String? @db.Text

  file_dir String? //Optional???

  valid_until DateTime @db.Date

  is_active Boolean @db.Boolean @default(true) 

  created_at DateTime @db.Timestamptz() @default(dbgenerated("CURRENT_TIMESTAMP"))
  updated_at DateTime @db.Timestamptz() @default(dbgenerated("CURRENT_TIMESTAMP"))
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)
}

model AttendanceType {
  id String @db.Uuid @id @default(uuid())

  company_id String @db.Uuid
  company Company @relation(fields: [company_id], references: [id])

  name String @db.VarChar(50)

  check_in DateTime @db.Time()
  check_out DateTime @db.Time()

  workspace_address String? @db.VarChar()
  workspace_long Float? @db.DoublePrecision
  workspace_lat Float? @db.DoublePrecision

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)

  employees Employee[]
  attendances Attendance[]
}

model Attendance {
  id String @db.Uuid @id @default(uuid())

  company_id String @db.Uuid()
  company Company @relation(fields: [company_id], references: [id])

  employee_id String @db.Uuid
  employee Employee @relation(fields: [employee_id], references: [id])

  type_id String @db.Uuid
  type AttendanceType @relation(fields: [type_id], references: [id])

  check_in DateTime @db.Time()
  check_in_status CheckInStatus
  check_in_address String @db.VarChar()
  check_in_long Float @db.DoublePrecision
  check_in_lat Float @db.DoublePrecision

  check_out DateTime? @db.Time()
  check_out_status CheckOutStatus?
  check_out_address String? @db.VarChar()
  check_out_long Float? @db.DoublePrecision
  check_out_lat Float? @db.DoublePrecision

  filedir String?

  approval AttendanceApproval @default(APPROVED)

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)

}

enum AttendanceApproval {
  APPROVED
  DISAPPROVED
  PENDING
}

enum CheckInStatus {
  ON_TIME
  LATE
}

enum CheckOutStatus {
  ON_TIME
  EARLY
}

model AbsenceLeave {
  id String @db.Uuid @id @default(uuid())

  employee_id String @db.Uuid
  employee Employee @relation(fields: [employee_id], references: [id])

  company_id String @db.Uuid
  company Company @relation(fields: [company_id], references: [id])

  type AbsentType

  reason String? @db.Text
  
  date DateTime @db.Date @default(now())

  status leaveStatus @default(PENDING)

  filedir String?

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)
}

enum AbsentType{
  SICK
  PERMIT
  LEAVE
}

enum leaveStatus {
  APPROVED
  REJECTED
  PENDING
}

model Transaction {
  id String @db.Uuid @id @default(uuid())

  company_id String @db.Uuid
  company Company @relation(fields: [company_id], references: [id])

  subscription_id String @db.Uuid
  subscription Subscription @relation(fields: [subscription_id],references: [id])

  merchantRef String @unique
  tripayRef String?
  paymentMethod String?
  expiresAt DateTime? @db.Timestamptz()
  paidAt DateTime? @db.Timestamptz()
  

  status TransactionStatus @default(UNPAID)
  

  total Int @db.Integer
  taxRate Decimal @db.Decimal(5,2) @default(10.00)

  created_at DateTime @db.Timestamptz() @default(now())
  updated_at DateTime @db.Timestamptz() @updatedAt
  deleted_at DateTime? @db.Timestamptz() 
  is_deleted Boolean @db.Boolean @default(false)
}

enum TransactionStatus{
  PAID
  UNPAID
}

model PasswordReset {
  id String   @id @default(uuid())

  token String   @unique
  
  employee_id String @db.Uuid
  employee Employee @relation(fields: [employee_id], references: [id])
  
  created_at DateTime @default(now())
  expires_at DateTime
}

